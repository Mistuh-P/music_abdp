<div role="tabpanel">

  <!-- Nav tabs -->
  <ul class="nav nav-tabs dashboard-tabs" role="tablist">
    <li role="presentation" class="active">
      <a href="#balls" aria-controls="balls" role="tab" data-toggle="tab">Balls</a>
    </li>
    <li role="presentation">
      <a href="#charts" aria-controls="charts" role="tab" data-toggle="tab">Charts</a>
    </li>
  </ul>
  <!-- Tab panes -->
  <div class="tab-content">
    <div role="tabpanel" class="tab-pane fade in active well well-lg" id="balls">

    <div class="colour-key">
      <ul>
        <li class="colour-alternative">Alternative</li><li> &bull; </li>
        <li class="colour-blues">Blues</li><li> &bull; </li>
        <li class="colour-classical">Classical</li><li> &bull; </li>
        <li class="colour-country">Country</li><li> &bull; </li>
        <li class="colour-hip-hop">Hip Hop</li><li> &bull; </li>
        <li class="colour-jazz">Jazz</li><li> &bull; </li>
        <li class="colour-pop">Pop</li><li> &bull; </li>
        <li class="colour-rb">R&B</li><li> &bull; </li>
        <li class="colour-singer-songwriter">Singer/Songwriter</li><li> &bull; </li>
        <li class="colour-rock">Rock</li>
      </ul>
    </div>

    <%# passing in values from the controller in this manner is %>
    <%# embarrasingly awful, but it's Thursday night and I'm tired... %>
    <% ratings_count = 0 %>
    <% trophies_sum = 0 %>
    <% (0...@all_highest_ratings.count).each do |i| %>
      <% (0...@all_highest_ratings[i].count).each do |j| %>
        <% (0...@all_highest_ratings[i][j].count).each do |k| %>
          <% rating = @all_highest_ratings[i][j][k] %>
          <% if rating[:rating] > 0 %>
            <input id= "genre-<%= i %>-question-<%= j %>-trophies-<%= k %>" type="hidden" data-genre='<%= i %>' data-question="<%= j %>" data-user="<%= rating[:user_name] %>" data-trophies = '<%= rating[:rating] %>'>
            <% ratings_count += 1 %>
            <% trophies_sum += rating[:rating] %>
          <% end %>
        <% end %>
      <% end %>
    <% end %>

    <input id="ratings_count" type="hidden" data-count-value='<%= ratings_count %>'>
    <input id="trophies_sum" type="hidden" data-trophies-sum='<%= trophies_sum %>'>

    <script>

      // ideally, this should dynamically set height based on viewport
      $("#balls").height(450);

      var width = $("#balls").width(),
          height = $("#balls").height() - 20,
          padding = 1.5, // separation between same-color nodes
          clusterPadding = 6, // separation between different-color nodes
          maxRadius = 12;

      var numberOfNodes = parseInt($('#ratings_count').attr('data-count-value')); // total number of nodes
      var trophiesSum = parseInt($('#trophies_sum').attr('data-trophies-sum')); // total number of nodes
      console.log("number of nodes", numberOfNodes);
      console.log("trophies sum", trophiesSum);

      numberOfClusters = 10; // number of distinct clusters

      var color = d3.scale.category10()
          .domain(d3.range(numberOfClusters));

      // The largest node for each cluster.
      var largestNodesPerCluster = new Array(numberOfClusters);

      var rating_objects = []
      for (var i = 0; i < 10; i++) {
        for (var j = 0; j < 3; j++) {
          for (var k = 0; k < 5; k++) {
            rating = $("#genre-" + i + "-question-" + j + "-trophies-" + k);
            trophies = rating.attr('data-trophies');
            if (parseInt(trophies) > 0) {
              var genre = rating.attr('data-genre');
              var user = rating.attr('data-user');
              var raw_question = parseInt(rating.attr('data-question'));
              var question;
              if (raw_question == 0) {

                // composer instead of artist for classical
                question = genre == 2 ? "(composer)" : "(artist)";
              } else if (raw_question == 1) {
                question = "(album)";
              } else {
                question = "(track)";
              }

              rating_object = {"cluster": genre, "question": question, "user": user, "radius": trophies}
              rating_objects.push(rating_object)
            }
          }
        }
      }

      var nodes = d3.range(numberOfNodes).map(function(index) {
        i = parseInt(rating_objects[index]["cluster"]);

        // tweak with this number

        r = parseFloat(Math.sqrt(rating_objects[index]["radius"] / trophiesSum)) * 175;
        q = rating_objects[index]["question"];
        user = rating_objects[index]["user"]
        d = {cluster: i, radius: r, user: user, question: q};
        if (!largestNodesPerCluster[i] || (r > largestNodesPerCluster[i].trophies)) {largestNodesPerCluster[i] = d;
        }
        return d;
      })

      // Use the pack layout to initialize node positions.
      d3.layout.pack()
      .sort(null)
      .size([width, height])
      .children(function(d) { return d.values; })
      .value(function(d) { return d.radius * d.radius; })
      .nodes({values: d3.nest()
        .key(function(d) { return d.cluster; })
        .entries(nodes)});

      var force = d3.layout.force()
      .nodes(nodes)
      .size([width, height])
      .gravity(.02)
      .charge(0)
      .on("tick", tick)
      .start();

      var svg = d3.select("#balls").append("svg")
      .attr("width", width)
      .attr("height", height);

      var gnode = svg.selectAll("g.gnode")
      .data(nodes)
      .enter()
      .append('g')
      .classed('gnode', true);

      var node = gnode
      .append("circle")
      .style("fill", function(d) { return color(d.cluster); })
      .call(force.drag);

      var label = gnode
      .append("text")
      .attr('dy', function(d) {return -d.radius})
      .each(function (d) {
        var arr = (d.user + "~" + d.question).split("~");
        if (arr != undefined) {
          for (i = 0; i < arr.length; i++) {
            d3.select(this).append("tspan")
              .text(arr[i])
              .attr("dy", i ? d.radius * 0.35 : 0)
              .attr("x", 0)
              .attr("text-anchor", "middle")
              .attr("class", "tspan" + i);
          }
        }
      })
      .attr('font-size', function(d) {return (d.radius / 50) + "em"})
      .attr('text-anchor', "middle")
      .classed('ball-text', true)

      node.transition()
      .duration(750)
      .delay(function(d, i) { return i * 5; })
      .attrTween("r", function(d) {
        var i = d3.interpolate(0, d.radius);
        return function(t) { return d.radius = i(t); };
      });

      function tick(e) {
        node
        .each(cluster(10 * e.alpha * e.alpha))
        .each(collide(.5))
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });

        label.attr("transform", function(d) {
          return 'translate(' + [d.x, d.y] + ')';
        });
      }


      // Move d to be adjacent to the cluster node.
      function cluster(alpha) {
        return function(d) {
          var cluster = largestNodesPerCluster[d.cluster];
          if (cluster === d) return;
          var x = d.x - cluster.x,
          y = d.y - cluster.y,
          l = Math.sqrt(x * x + y * y),
          r = d.radius + cluster.radius;
          if (l != r) {
            l = (l - r) / l * alpha;
            d.x -= x *= l;
            d.y -= y *= l;
            cluster.x += x;
            cluster.y += y;
          }
        };
      }

      // Resolves collisions between d and all other circles.
      function collide(alpha) {
        var quadtree = d3.geom.quadtree(nodes);
        return function(d) {
          var r = d.radius + maxRadius + Math.max(padding, clusterPadding),
          nx1 = d.x - r,
          nx2 = d.x + r,
          ny1 = d.y - r,
          ny2 = d.y + r;
          quadtree.visit(function(quad, x1, y1, x2, y2) {
            if (quad.point && (quad.point !== d)) {
              var x = d.x - quad.point.x,
              y = d.y - quad.point.y,
              l = Math.sqrt(x * x + y * y),
              r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? padding : clusterPadding);
              if (l < r) {
                l = (l - r) / l * alpha;
                d.x -= x *= l;
                d.y -= y *= l;
                quad.point.x += x;
                quad.point.y += y;
              }
            }
            return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
          });
        };
      }

    </script>
    </div>


    <div role="tabpanel" class="tab-pane fade well well-lg" id="charts">
      <div class="row">
        <% (0...@genre_hashes.count).each do |i| # i is number of genres %>
        <% genre_hash = @genre_hashes[i] %>
        <div class="col-md-8 col-md-offset-2">
          <table class="table leaderboard-table">
            <thead>
              <% colour_array = ["alternative", "blues", "classical", "country", "hip-hop", "jazz", "pop", "rb", "singer-songwriter", "rock"] %>
              <tr class= '<%= "colour-" + colour_array[i] %>' >
                <th><%= genre_hash[:genre_name] %></th>
                <th>artist</th>
                <th>album</th>
                <th>track</th>
                <th>total quizzes</th>
              </tr>
            </thead>
            <tbody>

              <% if @current_user && @user_hash %>
              <tr class="leaderboard-me">
                <td>My trophies</td>
                <% (0...@all_highest_ratings[i].count).each do |j| %>
                <td>

                  <%= @user_hash[:genre_hashes][i][:ratings_array][j] %><i class='fa fa-trophy fa-fw'></i>
                  <% if @user_hash[:pic_url] %>
                    <img class="facebook-small" src='<%= @user_hash[:pic_url] %>' alt="">
                  <% end %>
                  </td>
                <% end %>


                <td><%= @user_hash[:genre_hashes][i][:total_quizzes] %></td>
              </tr>
              <% end %>

              <% (0...5).each do |k| # k is number of leaders %>
              <% if @all_highest_ratings[i][0][k][:rating] > 0 || @all_highest_ratings[i][1][k][:rating] > 0 || @all_highest_ratings[i][2][k][:rating] > 0 %>
              <tr class="leaderboard-leaders">
                <% if k == 0 %>
                <td>Trophy leaders</td>
                <% else %>
                <td></td>
                <% end %>

                      <% (0...@all_highest_ratings[i].count).each do |j| # j is number of questions %>
                        <% rating = @all_highest_ratings[i][j][k][:rating] %>
                        <% if rating > 0 %>
                          <% user_name = @all_highest_ratings[i][j][k][:user_name] %>
                          <% user = @all_highest_ratings[i][j][k][:user] %>
                          <td><%= rating %><i class='fa fa-trophy fa-fw'></i>

                            <% if @all_highest_ratings[i][j][k][:pic_url] %>
                              <img class="facebook-small" src='<%= @all_highest_ratings[i][j][k][:pic_url] %>' alt="">
                            <% end %>
                            <%= user_name %>

                          </td>
                        <% else %>
                          <td></td>
                        <% end %>
                      <% end %>
                      <td></td>
                    </tr>
                  <% end %>
              <% end %>

              <tr class="leaderboard-average">
                <td>Total average</td>
                <% (0...genre_hash[:percentages_array].count).each do |j| # j is number of questions %>
                <td><%= "%.0f" % genre_hash[:percentages_array][j] %>%</td>
                <% end %>
                <td><%= genre_hash[:total_quizzes].to_s %></td>
              </tr>

            </tbody>
          </table>
        </div>
        <% end %>
      </div>
    </div>
  </div>
</div>