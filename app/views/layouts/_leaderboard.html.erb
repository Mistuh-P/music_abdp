<div role="tabpanel">

  <!-- Nav tabs -->
  <ul class="nav nav-tabs dashboard-tabs" role="tablist">
    <li role="presentation" class="active">
      <a href="#balls" aria-controls="balls" role="tab" data-toggle="tab">Balls</a>
    </li>
    <li role="presentation">
      <a href="#charts" aria-controls="charts" role="tab" data-toggle="tab">Charts</a>
    </li>
  </ul>
  <!-- Tab panes -->
  <div class="tab-content">
    <div role="tabpanel" class="div-balls tab-pane fade in active well well-lg" id="balls">

    <div class="colour-key">
      <ul>
        <li class="colour-alternative">Alternative</li>
        <li class="colour-blues">Blues</li>
        <li class="colour-classical">Classical</li>
        <li class="colour-country">Country</li>
        <li class="colour-hip-hop">Hip Hop</li>
        <li class="colour-jazz">Jazz</li>
        <li class="colour-pop">Pop</li>
        <li class="colour-rb">R&B</li>
        <li class="colour-singer-songwriter">Singer/Songwriter</li>
        <li class="colour-rock">Rock</li>
      </ul>

    </div>

      <script>
      $(".div-balls").height(450);

        var width = $(".div-balls").width(),
            height = $(".div-balls").height() - 20,
            padding = 1.5, // separation between same-color nodes
            clusterPadding = 6, // separation between different-color nodes
            maxRadius = 12;

        var n = 200, // total number of nodes
            m = 10; // number of distinct clusters

        var color = d3.scale.category10()
            .domain(d3.range(m));

        // The largest node for each cluster.
        var clusters = new Array(m);

        var nodes = d3.range(n).map(function() {
          var i = Math.floor(Math.random() * m),
              r = Math.sqrt((i + 1) / m * -Math.log(Math.random())) * maxRadius,
              d = {cluster: i, radius: r};
          if (!clusters[i] || (r > clusters[i].radius)) clusters[i] = d;
          return d;
        });

        // Use the pack layout to initialize node positions.
        d3.layout.pack()
            .sort(null)
            .size([width, height])
            .children(function(d) { return d.values; })
            .value(function(d) { return d.radius * d.radius; })
            .nodes({values: d3.nest()
              .key(function(d) { return d.cluster; })
              .entries(nodes)});

        var force = d3.layout.force()
            .nodes(nodes)
            .size([width, height])
            .gravity(.02)
            .charge(0)
            .on("tick", tick)
            .start();

        var svg = d3.select(".div-balls").append("svg")
            .attr("width", width)
            .attr("height", height);

        var node = svg.selectAll("circle")
            .data(nodes)
          .enter().append("circle")
            .style("fill", function(d) { return color(d.cluster); })
            .call(force.drag);

        node.transition()
            .duration(750)
            .delay(function(d, i) { return i * 5; })
            .attrTween("r", function(d) {
              var i = d3.interpolate(0, d.radius);
              return function(t) { return d.radius = i(t); };
            });

        function tick(e) {
          node
              .each(cluster(10 * e.alpha * e.alpha))
              .each(collide(.5))
              .attr("cx", function(d) { return d.x; })
              .attr("cy", function(d) { return d.y; });
        }

        // Move d to be adjacent to the cluster node.
        function cluster(alpha) {
          return function(d) {
            var cluster = clusters[d.cluster];
            if (cluster === d) return;
            var x = d.x - cluster.x,
                y = d.y - cluster.y,
                l = Math.sqrt(x * x + y * y),
                r = d.radius + cluster.radius;
            if (l != r) {
              l = (l - r) / l * alpha;
              d.x -= x *= l;
              d.y -= y *= l;
              cluster.x += x;
              cluster.y += y;
            }
          };
        }

        // Resolves collisions between d and all other circles.
        function collide(alpha) {
          var quadtree = d3.geom.quadtree(nodes);
          return function(d) {
            var r = d.radius + maxRadius + Math.max(padding, clusterPadding),
                nx1 = d.x - r,
                nx2 = d.x + r,
                ny1 = d.y - r,
                ny2 = d.y + r;
            quadtree.visit(function(quad, x1, y1, x2, y2) {
              if (quad.point && (quad.point !== d)) {
                var x = d.x - quad.point.x,
                    y = d.y - quad.point.y,
                    l = Math.sqrt(x * x + y * y),
                    r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? padding : clusterPadding);
                if (l < r) {
                  l = (l - r) / l * alpha;
                  d.x -= x *= l;
                  d.y -= y *= l;
                  quad.point.x += x;
                  quad.point.y += y;
                }
              }
              return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
            });
          };
        }

      </script>
    </div>


    <div role="tabpanel" class="tab-pane fade well well-lg" id="charts">
      <div class="row">
        <% (0...@genre_hashes.count).each do |i| # i is number of genres %>
        <% genre_hash = @genre_hashes[i] %>
          <div class="col-md-8 col-md-offset-2">
            <table class="table leaderboard-table">
              <thead>
                <% colour_array = ["alternative", "blues", "classical", "country", "hip-hop", "jazz", "pop", "rb", "singer-songwriter", "rock"] %>
                <tr class= '<%= "colour-" + colour_array[i] %>' >
                  <th><%= genre_hash[:genre_name] %></th>
                  <th>artist</th>
                  <th>album</th>
                  <th>track</th>
                  <th>total quizzes</th>
                </tr>
              </thead>
              <tbody>

                <% if @current_user && @user_hash %>
                  <tr class="leaderboard-me">
                    <td>My trophies</td>
                    <% (0...@all_highest_ratings[i].count).each do |j| %>
                      <td></i><%= @user_hash[:genre_hashes][i][:ratings_array][j] %><i class='fa fa-trophy fa-fw'></i></td>
                    <% end %>
                    <td><%= @user_hash[:genre_hashes][i][:total_quizzes] %></td>
                  </tr>
                <% end %>

                <% (0...5).each do |k| # k is number of leaders %>
                  <% if @all_highest_ratings[i][0][k][:rating] > 0 || @all_highest_ratings[i][1][k][:rating] > 0 || @all_highest_ratings[i][2][k][:rating] > 0 %>
                    <tr class="leaderboard-leaders">
                      <% if k == 0 %>
                        <td>Trophy leaders</td>
                      <% else %>
                        <td></td>
                      <% end %>

                      <% (0...@all_highest_ratings[i].count).each do |j| # j is number of questions %>
                        <% rating = @all_highest_ratings[i][j][k][:rating] %>
                        <% if rating > 0 %>
                          <% user_name = @all_highest_ratings[i][j][k][:user_name] %>
                          <% user = @all_highest_ratings[i][j][k][:user] %>
                          <td><%= rating %><i class='fa fa-trophy fa-fw'></i> <%= link_to user_name, user %></td>
                        <% else %>
                          <td></td>
                        <% end %>
                      <% end %>
                      <td></td>
                    </tr>
                  <% end %>
                <% end %>

                <tr class="leaderboard-average">
                  <td>Total average</td>
                  <% (0...genre_hash[:percentages_array].count).each do |j| # j is number of questions %>
                    <td><%= "%.0f" % genre_hash[:percentages_array][j] %>%</td>
                  <% end %>
                  <td><%= genre_hash[:total_quizzes].to_s %></td>
                </tr>

              </tbody>
            </table>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>